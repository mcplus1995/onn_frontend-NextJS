/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/assets/{id}": {
    /**
     * Get an Asset
     * @description Image typed files can be dynamically resized and transformed to fit any need.
     */
    get: operations["getAsset"];
  };
  "/auth/login": {
    /**
     * Retrieve a Temporary Access Token
     * @description Retrieve a Temporary Access Token
     */
    post: operations["login"];
  };
  "/auth/refresh": {
    /**
     * Refresh Token
     * @description Refresh a Temporary Access Token.
     */
    post: operations["refresh"];
  };
  "/auth/logout": {
    /**
     * Log Out
     * @description Log Out
     */
    post: operations["logout"];
  };
  "/auth/password/request": {
    /**
     * Request a Password Reset
     * @description Request a reset password email to be send.
     */
    post: operations["passwordRequest"];
  };
  "/auth/password/reset": {
    /**
     * Reset a Password
     * @description The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password.
     */
    post: operations["passwordReset"];
  };
  "/auth/oauth": {
    /**
     * List OAuth Providers
     * @description List configured OAuth providers.
     */
    get: operations["oauth"];
  };
  "/auth/oauth/{provider}": {
    /**
     * Authenticated using an OAuth provider
     * @description Start OAuth flow using the specified provider
     */
    get: operations["oauthProvider"];
  };
  "/server/info": {
    /**
     * System Info
     * @description Perform a system status check and return the options.
     */
    get: operations["serverInfo"];
  };
  "/server/ping": {
    /**
     * Ping
     * @description Ping, pong. Ping.. pong.
     */
    get: operations["ping"];
  };
  "/items/sanction_entities": {
    /**
     * List Items
     * @description List the sanction_entities items.
     */
    get: operations["readItemsSanctionEntities"];
  };
  "/items/sanction_entities/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single sanction_entities item by unique identifier.
     */
    get: operations["readSingleItemsSanctionEntities"];
  };
  "/items/sanction_purposes": {
    /**
     * List Items
     * @description List the sanction_purposes items.
     */
    get: operations["readItemsSanctionPurposes"];
  };
  "/items/sanction_purposes/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single sanction_purposes item by unique identifier.
     */
    get: operations["readSingleItemsSanctionPurposes"];
  };
  "/items/sanction_sectors": {
    /**
     * List Items
     * @description List the sanction_sectors items.
     */
    get: operations["readItemsSanctionSectors"];
  };
  "/items/sanction_sectors/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single sanction_sectors item by unique identifier.
     */
    get: operations["readSingleItemsSanctionSectors"];
  };
  "/items/sanction_types": {
    /**
     * List Items
     * @description List the sanction_types items.
     */
    get: operations["readItemsSanctionTypes"];
  };
  "/items/sanction_types/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single sanction_types item by unique identifier.
     */
    get: operations["readSingleItemsSanctionTypes"];
  };
  "/items/sanctions": {
    /**
     * List Items
     * @description List the sanctions items.
     */
    get: operations["readItemsSanctions"];
  };
  "/items/sanctions/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single sanctions item by unique identifier.
     */
    get: operations["readSingleItemsSanctions"];
  };
  "/items/wiki_page_wiki_category": {
    /**
     * List Items
     * @description List the wiki_page_wiki_category items.
     */
    get: operations["readItemsWikiPageWikiCategory"];
  };
  "/items/wiki_page_wiki_category/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single wiki_page_wiki_category item by unique identifier.
     */
    get: operations["readSingleItemsWikiPageWikiCategory"];
  };
  "/items/global": {
    /**
     * List Items
     * @description List the global items.
     */
    get: operations["readItemsGlobal"];
  };
  "/items/global/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single global item by unique identifier.
     */
    get: operations["readSingleItemsGlobal"];
  };
  "/items/homepage": {
    /**
     * List Items
     * @description List the homepage items.
     */
    get: operations["readItemsHomepage"];
  };
  "/items/homepage/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single homepage item by unique identifier.
     */
    get: operations["readSingleItemsHomepage"];
  };
  "/items/block_hero": {
    /**
     * List Items
     * @description List the block_hero items.
     */
    get: operations["readItemsBlockHero"];
  };
  "/items/block_hero/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_hero item by unique identifier.
     */
    get: operations["readSingleItemsBlockHero"];
  };
  "/items/block_richtext": {
    /**
     * List Items
     * @description List the block_richtext items.
     */
    get: operations["readItemsBlockRichtext"];
  };
  "/items/block_richtext/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_richtext item by unique identifier.
     */
    get: operations["readSingleItemsBlockRichtext"];
  };
  "/items/navigations": {
    /**
     * List Items
     * @description List the navigations items.
     */
    get: operations["readItemsNavigations"];
  };
  "/items/navigations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single navigations item by unique identifier.
     */
    get: operations["readSingleItemsNavigations"];
  };
  "/items/block_cardgroup": {
    /**
     * List Items
     * @description List the block_cardgroup items.
     */
    get: operations["readItemsBlockCardgroup"];
  };
  "/items/block_cardgroup/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_cardgroup item by unique identifier.
     */
    get: operations["readSingleItemsBlockCardgroup"];
  };
  "/items/block_cardgroup_cms_page": {
    /**
     * List Items
     * @description List the block_cardgroup_cms_page items.
     */
    get: operations["readItemsBlockCardgroupCMSPage"];
  };
  "/items/block_cardgroup_cms_page/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_cardgroup_cms_page item by unique identifier.
     */
    get: operations["readSingleItemsBlockCardgroupCMSPage"];
  };
  "/items/block_cardgroup_cards": {
    /**
     * List Items
     * @description List the block_cardgroup_cards items.
     */
    get: operations["readItemsBlockCardgroupCards"];
  };
  "/items/block_cardgroup_cards/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_cardgroup_cards item by unique identifier.
     */
    get: operations["readSingleItemsBlockCardgroupCards"];
  };
  "/items/homepage_blocks": {
    /**
     * List Items
     * @description List the homepage_blocks items.
     */
    get: operations["readItemsHomepageBlocks"];
  };
  "/items/homepage_blocks/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single homepage_blocks item by unique identifier.
     */
    get: operations["readSingleItemsHomepageBlocks"];
  };
  "/items/articles": {
    /**
     * List Items
     * @description List the articles items.
     */
    get: operations["readItemsArticles"];
  };
  "/items/articles/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single articles item by unique identifier.
     */
    get: operations["readSingleItemsArticles"];
  };
  "/items/articles_directus_users": {
    /**
     * List Items
     * @description List the articles_directus_users items.
     */
    get: operations["readItemsArticlesDirectusUsers"];
  };
  "/items/articles_directus_users/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single articles_directus_users item by unique identifier.
     */
    get: operations["readSingleItemsArticlesDirectusUsers"];
  };
  "/items/cms_page_cms_category": {
    /**
     * List Items
     * @description List the cms_page_cms_category items.
     */
    get: operations["readItemsCMSPageCMSCategory"];
  };
  "/items/cms_page_cms_category/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single cms_page_cms_category item by unique identifier.
     */
    get: operations["readSingleItemsCMSPageCMSCategory"];
  };
  "/items/comments": {
    /**
     * List Items
     * @description List the comments items.
     */
    get: operations["readItemsComments"];
  };
  "/items/comments/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single comments item by unique identifier.
     */
    get: operations["readSingleItemsComments"];
  };
  "/items/article_sources": {
    /**
     * List Items
     * @description List the article_sources items.
     */
    get: operations["readItemsArticleSources"];
  };
  "/items/article_sources/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single article_sources item by unique identifier.
     */
    get: operations["readSingleItemsArticleSources"];
  };
  "/items/articles_escalation_pathways": {
    /**
     * List Items
     * @description List the articles_escalation_pathways items.
     */
    get: operations["readItemsArticlesEscalationPathways"];
  };
  "/items/articles_escalation_pathways/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single articles_escalation_pathways item by unique identifier.
     */
    get: operations["readSingleItemsArticlesEscalationPathways"];
  };
  "/items/cms_category": {
    /**
     * List Items
     * @description List the cms_category items.
     */
    get: operations["readItemsCMSCategory"];
  };
  "/items/cms_category/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single cms_category item by unique identifier.
     */
    get: operations["readSingleItemsCMSCategory"];
  };
  "/items/cms_page": {
    /**
     * List Items
     * @description List the cms_page items.
     */
    get: operations["readItemsCMSPage"];
  };
  "/items/cms_page/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single cms_page item by unique identifier.
     */
    get: operations["readSingleItemsCMSPage"];
  };
  "/fields": {
    /**
     * List All Fields
     * @description Returns a list of the fields available in the project.
     */
    get: operations["getFields"];
  };
  "/fields/{collection}": {
    /**
     * List Fields in Collection
     * @description Returns a list of the fields available in the given collection.
     */
    get: operations["getCollectionFields"];
    /**
     * Create Field in Collection
     * @description Create a new field in a given collection.
     */
    post: operations["createField"];
  };
  "/fields/{collection}/{id}": {
    /**
     * Retrieve a Field
     * @description Retrieves the details of a single field in a given collection.
     */
    get: operations["getCollectionField"];
    /**
     * Delete a Field
     * @description Delete an existing field.
     */
    delete: operations["deleteField"];
    /**
     * Update a Field
     * @description Update an existing field.
     */
    patch: operations["updateField"];
  };
  "/relations": {
    /**
     * List Relations
     * @description List the relations.
     */
    get: operations["getRelations"];
    /**
     * Create a Relation
     * @description Create a new relation.
     */
    post: operations["createRelation"];
  };
  "/relations/{id}": {
    /**
     * Retrieve a Relation
     * @description Retrieve a single relation by unique identifier.
     */
    get: operations["getRelation"];
    /**
     * Delete a Relation
     * @description Delete an existing relation.
     */
    delete: operations["deleteRelation"];
    /**
     * Update a Relation
     * @description Update an existing relation
     */
    patch: operations["updateRelation"];
  };
  "/files": {
    /**
     * List Files
     * @description List the files.
     */
    get: operations["getFiles"];
  };
  "/files/{id}": {
    /**
     * Retrieve a Files
     * @description Retrieve a single file by unique identifier.
     */
    get: operations["getFile"];
  };
  "/items/escalation_pathway_statuses": {
    /**
     * List Items
     * @description List the escalation_pathway_statuses items.
     */
    get: operations["readItemsEscalationPathwayStatuses"];
  };
  "/items/escalation_pathway_statuses/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single escalation_pathway_statuses item by unique identifier.
     */
    get: operations["readSingleItemsEscalationPathwayStatuses"];
  };
  "/items/escalation_regions": {
    /**
     * List Items
     * @description List the escalation_regions items.
     */
    get: operations["readItemsEscalationRegions"];
  };
  "/items/escalation_regions/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single escalation_regions item by unique identifier.
     */
    get: operations["readSingleItemsEscalationRegions"];
  };
  "/items/escalation_pathways": {
    /**
     * List Items
     * @description List the escalation_pathways items.
     */
    get: operations["readItemsEscalationPathways"];
  };
  "/items/escalation_pathways/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single escalation_pathways item by unique identifier.
     */
    get: operations["readSingleItemsEscalationPathways"];
  };
  "/items/sanctions_sanction_purposes": {
    /**
     * List Items
     * @description List the sanctions_sanction_purposes items.
     */
    get: operations["readItemsSanctionsSanctionPurposes"];
  };
  "/items/sanctions_sanction_purposes/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single sanctions_sanction_purposes item by unique identifier.
     */
    get: operations["readSingleItemsSanctionsSanctionPurposes"];
  };
  "/items/sanctions_sanction_sectors": {
    /**
     * List Items
     * @description List the sanctions_sanction_sectors items.
     */
    get: operations["readItemsSanctionsSanctionSectors"];
  };
  "/items/sanctions_sanction_sectors/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single sanctions_sanction_sectors item by unique identifier.
     */
    get: operations["readSingleItemsSanctionsSanctionSectors"];
  };
  "/items/sanctions_sanction_types": {
    /**
     * List Items
     * @description List the sanctions_sanction_types items.
     */
    get: operations["readItemsSanctionsSanctionTypes"];
  };
  "/items/sanctions_sanction_types/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single sanctions_sanction_types item by unique identifier.
     */
    get: operations["readSingleItemsSanctionsSanctionTypes"];
  };
  "/items/wiki_category": {
    /**
     * List Items
     * @description List the wiki_category items.
     */
    get: operations["readItemsWikiCategory"];
  };
  "/items/wiki_category/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single wiki_category item by unique identifier.
     */
    get: operations["readSingleItemsWikiCategory"];
  };
  "/items/wiki_page": {
    /**
     * List Items
     * @description List the wiki_page items.
     */
    get: operations["readItemsWikiPage"];
  };
  "/items/wiki_page/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single wiki_page item by unique identifier.
     */
    get: operations["readSingleItemsWikiPage"];
  };
  "/items/article_sources_articles": {
    /**
     * List Items
     * @description List the article_sources_articles items.
     */
    get: operations["readItemsArticleSourcesArticles"];
  };
  "/items/article_sources_articles/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single article_sources_articles item by unique identifier.
     */
    get: operations["readSingleItemsArticleSourcesArticles"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Query: {
      /**
       * @description Control what fields are being returned in the object.
       * @example [
       *   "*",
       *   "*.*"
       * ]
       */
      fields?: string[];
      /**
       * @example {
       *   "<field>": {
       *     "<operator>": "<value>"
       *   }
       * }
       */
      filter?: Record<string, never>;
      /** @description Filter by items that contain the given search query in one of their fields. */
      search?: string;
      /**
       * @description How to sort the returned items.
       * @example [
       *   "-date_created"
       * ]
       */
      sort?: string[];
      /** @description Set the maximum number of items that will be returned */
      limit?: number;
      /** @description How many items to skip when fetching data. */
      offset?: number;
      /** @description Cursor for use in pagination. Often used in combination with limit. */
      page?: number;
      /**
       * @description Deep allows you to set any of the other query parameters on a nested relational dataset.
       * @example {
       *   "related_articles": {
       *     "_limit": 3
       *   }
       * }
       */
      deep?: Record<string, never>;
    };
    "x-metadata": {
      /** @description Returns the total item count of the collection you're querying. */
      total_count?: number;
      /** @description Returns the item count of the collection you're querying, taking the current filter/search parameters into account. */
      filter_count?: number;
    };
    ItemsSanctionEntities: {
      id?: number;
      status?: string;
      sort?: number | null;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      title?: string;
    };
    ItemsSanctionPurposes: {
      id?: number;
      status?: string;
      sort?: number | null;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      title?: string | null;
    };
    ItemsSanctionSectors: {
      id?: number;
      status?: string;
      sort?: number | null;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      title?: string | null;
    };
    ItemsSanctionTypes: {
      id?: number;
      status?: string;
      sort?: number | null;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      title?: string | null;
    };
    ItemsSanctions: {
      id?: number;
      status?: string;
      sort?: number | null;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      parent?: number | components["schemas"]["ItemsSanctions"] | null;
      entity?: number | components["schemas"]["ItemsSanctionEntities"] | null;
      /** Format: date */
      date?: string | null;
      sanction_status?: string | null;
      reference?: string | null;
      short_description?: string | null;
      text_internal?: string | null;
      djangoId?: string | null;
      slug?: string | null;
      title?: string | null;
      statutory_basis?: string | null;
      link?: string | null;
      type?: ((number | components["schemas"]["ItemsSanctionsSanctionTypes"])[]) | null;
      purpose?: ((number | components["schemas"]["ItemsSanctionsSanctionPurposes"])[]) | null;
      sector?: ((number | components["schemas"]["ItemsSanctionsSanctionSectors"])[]) | null;
    };
    ItemsWikiPageWikiCategory: {
      id?: number;
      wiki_page_id?: number | components["schemas"]["ItemsWikiPage"] | null;
      wiki_category_id?: number | components["schemas"]["ItemsWikiCategory"] | null;
    };
    ItemsGlobal: {
      id?: number;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      description?: string | null;
      title?: string | null;
      favicon?: string | components["schemas"]["Files"] | null;
    };
    ItemsHomepage: {
      id?: number;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      title?: string | null;
      blocks?: ((number | components["schemas"]["ItemsHomepageBlocks"])[]) | null;
    };
    ItemsBlockHero: {
      id?: number;
      status?: string;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      image?: string | components["schemas"]["Files"] | null;
      overlay_text?: string | null;
      overlay_color?: string | null;
    };
    ItemsBlockRichtext: {
      id?: number;
      status?: string;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      headline?: string | null;
      content?: unknown;
    };
    ItemsNavigations: {
      id?: number;
      status?: string;
      sort?: number | null;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** @description This serves as the internal title for this navigation */
      title?: string | null;
      items?: unknown;
    };
    ItemsBlockCardgroup: {
      id?: number;
      status?: string;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      headline?: string | null;
      content?: string | null;
      group_type?: string | null;
      cards?: ((number | components["schemas"]["ItemsBlockCardgroupCards"])[]) | null;
      pages?: ((number | components["schemas"]["ItemsBlockCardgroupCMSPage"])[]) | null;
    };
    ItemsBlockCardgroupCMSPage: {
      id?: number;
      block_cardgroup_id?: number | components["schemas"]["ItemsBlockCardgroup"] | null;
      cms_page_id?: number | components["schemas"]["ItemsCMSPage"] | null;
    };
    ItemsBlockCardgroupCards: {
      id?: number;
      cardgroup_id?: number | components["schemas"]["ItemsBlockCardgroup"] | null;
      icon?: string | null;
      headline?: string | null;
      content?: string | null;
      link_label?: string | null;
      link_url?: string | null;
      link?: boolean | null;
    };
    ItemsHomepageBlocks: {
      id?: number;
      homepage_id?: number | components["schemas"]["ItemsHomepage"] | null;
      item?: ((string | components["schemas"]["ItemsBlockHero"] | components["schemas"]["ItemsBlockRichtext"] | components["schemas"]["ItemsBlockCardgroup"])[]) | null;
      sort?: number | null;
      collection?: string | null;
    };
    ItemsArticles: {
      id?: number;
      status?: string | null;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** @description This slug will be automatically generated/updated based on the title field */
      slug?: string | null;
      content?: string | null;
      is_relevant?: boolean | null;
      /** Format: float */
      relevance_score?: number | null;
      /** Format: timestamp */
      crawled_at?: string | null;
      raw_data?: unknown;
      tags?: unknown;
      article_source?: number | components["schemas"]["ItemsArticleSources"] | null;
      djangoId?: string | null;
      title?: string | null;
      language?: string | null;
      escalation_pathways?: ((number | components["schemas"]["ItemsArticlesEscalationPathways"])[]) | null;
      interacting_users?: ((number | components["schemas"]["ItemsArticlesDirectusUsers"])[]) | null;
    };
    ItemsArticlesDirectusUsers: {
      id?: number;
      articles_id?: number | components["schemas"]["ItemsArticles"] | null;
      /** Format: uuid */
      directus_users_id?: string | null;
    };
    ItemsCMSPageCMSCategory: {
      id?: number;
      cms_page_id?: number | components["schemas"]["ItemsCMSPage"] | null;
      cms_category_id?: number | components["schemas"]["ItemsCMSCategory"] | null;
    };
    ItemsComments: {
      id?: number;
      status?: string;
      sort?: number | null;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      comment?: string | null;
      /** Format: uuid */
      author?: string | null;
      parent?: number | components["schemas"]["ItemsComments"] | null;
    };
    ItemsArticleSources: {
      id?: number;
      status?: string;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      start_url?: string | null;
      crawl_config?: unknown;
      title?: string | null;
      is_active?: boolean | null;
      /** @description Add multiple keywords seperated by comma */
      keywords?: string | null;
      articles?: ((number | components["schemas"]["ItemsArticles"])[]) | null;
    };
    ItemsArticlesEscalationPathways: {
      id?: number;
      articles_id?: number | components["schemas"]["ItemsArticles"] | null;
      escalation_pathways_id?: number | components["schemas"]["ItemsEscalationPathways"] | null;
    };
    ItemsCMSCategory: {
      id?: number;
      status?: string;
      sort?: number | null;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      title?: string | null;
      intro_text?: string | null;
      /** @description This slug will be automatically generated/updated based on the title field */
      slug?: string | null;
      /** @description This title will be used instead of the title property if this page is used within a navigation */
      nav_title?: string | null;
    };
    ItemsCMSPage: {
      id?: number;
      status?: string;
      sort?: number | null;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      hero?: string | components["schemas"]["Files"] | null;
      title?: string | null;
      summary?: string | null;
      content?: string | null;
      tags?: unknown;
      /** @description This slug will be automatically generated/updated based on the title field */
      slug?: string | null;
      /** @description This title will be used instead of the title property if this page is used within a navigation */
      nav_title?: string | null;
      categories?: ((number | components["schemas"]["ItemsCMSPageCMSCategory"])[]) | null;
    };
    Fields: {
      id?: number;
      /**
       * @description Unique name of the collection this field is in.
       * @example about_us
       */
      collection?: string;
      /**
       * @description Unique name of the field. Field name is unique within the collection.
       * @example id
       */
      field?: string;
      special?: string[] | null;
      interface?: string | null;
      options?: unknown;
      display?: string | null;
      display_options?: unknown;
      readonly?: boolean;
      hidden?: boolean;
      sort?: number | null;
      width?: string | null;
      translations?: unknown;
      note?: string | null;
      conditions?: unknown;
      required?: boolean | null;
      group?: number | components["schemas"]["Fields"] | null;
      validation?: unknown;
      validation_message?: string | null;
    };
    Relations: {
      /**
       * @description Unique identifier for the relation.
       * @example 1
       */
      id?: number;
      /**
       * @description Collection that has the field that holds the foreign key.
       * @example directus_activity
       */
      many_collection?: string;
      /**
       * @description Foreign key. Field that holds the primary key of the related collection.
       * @example user
       */
      many_field?: string;
      /**
       * @description Collection on the _one_ side of the relationship.
       * @example directus_users
       */
      one_collection?: string;
      /**
       * @description Alias column that serves as the _one_ side of the relationship.
       * @example null
       */
      one_field?: string | null;
      one_collection_field?: string | null;
      one_allowed_collections?: string[] | null;
      /**
       * @description Field on the junction table that holds the many field of the related relation.
       * @example null
       */
      junction_field?: string | null;
      sort_field?: string | null;
      one_deselect_action?: string;
    };
    Files: {
      /**
       * @description Unique identifier for the file.
       * @example 8cbb43fe-4cdf-4991-8352-c461779cec02
       */
      id?: string;
      /**
       * @description Where the file is stored. Either `local` for the local filesystem or the name of the storage adapter (for example `s3`).
       * @example local
       */
      storage?: string;
      /**
       * @description Name of the file on disk. By default, Directus uses a random hash for the filename.
       * @example a88c3b72-ac58-5436-a4ec-b2858531333a.jpg
       */
      filename_disk?: string;
      /**
       * @description How you want to the file to be named when it's being downloaded.
       * @example avatar.jpg
       */
      filename_download?: string;
      /**
       * @description Title for the file. Is extracted from the filename on upload, but can be edited by the user.
       * @example User Avatar
       */
      title?: string;
      /**
       * @description MIME type of the file.
       * @example image/jpeg
       */
      type?: string;
      /**
       * @description Virtual folder where this file resides in.
       * @example null
       */
      folder?: string | components["schemas"]["Folders"] | null;
      /**
       * @description Who uploaded the file.
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      uploaded_by?: string | components["schemas"]["Users"];
      /**
       * Format: date-time
       * @description When the file was uploaded.
       * @example 2019-12-03T00:10:15+00:00
       */
      uploaded_on?: string;
      /** Format: uuid */
      modified_by?: string | null;
      /** Format: timestamp */
      modified_on?: string;
      /**
       * @description Character set of the file.
       * @example binary
       */
      charset?: string | null;
      /**
       * @description Size of the file in bytes.
       * @example 137862
       */
      filesize?: number;
      /**
       * @description Width of the file in pixels. Only applies to images.
       * @example 800
       */
      width?: number | null;
      /**
       * @description Height of the file in pixels. Only applies to images.
       * @example 838
       */
      height?: number | null;
      /**
       * @description Duration of the file in seconds. Only applies to audio and video.
       * @example 0
       */
      duration?: number | null;
      /**
       * @description Where the file was embedded from.
       * @example null
       */
      embed?: string | null;
      /** @description Description for the file. */
      description?: string | null;
      /** @description Where the file was created. Is automatically populated based on EXIF data for images. */
      location?: string | null;
      /** @description Tags for the file. Is automatically populated based on EXIF data for images. */
      tags?: string[] | null;
      /** @description IPTC, EXIF, and ICC metadata extracted from file */
      metadata?: unknown;
    };
    ItemsEscalationPathwayStatuses: {
      id?: number;
      status?: string;
      sort?: number | null;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      title?: string | null;
      description?: string | null;
      impact?: number | null;
      likelihood?: number | null;
      escalation_pathway_id?: number | components["schemas"]["ItemsEscalationPathways"] | null;
      djangoId?: string | null;
      djangoContent?: unknown;
    };
    ItemsEscalationRegions: {
      id?: number;
      status?: string;
      sort?: number | null;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** @description This slug will be automatically generated/updated based on the title field */
      slug?: string | null;
      title?: string | null;
      djangoId?: string | null;
      pathways?: ((number | components["schemas"]["ItemsEscalationPathways"])[]) | null;
    };
    ItemsEscalationPathways: {
      id?: number;
      status?: string;
      sort?: number | null;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      title?: string | null;
      /** @description This slug will be automatically generated/updated based on the title field */
      slug?: string | null;
      content?: string | null;
      region_id?: number | components["schemas"]["ItemsEscalationRegions"] | null;
      djangoId?: string | null;
      /** @description This is the JSON representation of the page content after transition from django */
      djangoContent?: unknown;
      statuses?: ((number | components["schemas"]["ItemsEscalationPathwayStatuses"])[]) | null;
      articles?: ((number | components["schemas"]["ItemsArticlesEscalationPathways"])[]) | null;
    };
    ItemsSanctionsSanctionPurposes: {
      id?: number;
      sanctions_id?: number | components["schemas"]["ItemsSanctions"] | null;
      sanction_purposes_id?: number | components["schemas"]["ItemsSanctionPurposes"] | null;
    };
    ItemsSanctionsSanctionSectors: {
      id?: number;
      sanctions_id?: number | components["schemas"]["ItemsSanctions"] | null;
      sanction_sectors_id?: number | components["schemas"]["ItemsSanctionSectors"] | null;
    };
    ItemsSanctionsSanctionTypes: {
      id?: number;
      sanctions_id?: number | components["schemas"]["ItemsSanctions"] | null;
      sanction_types_id?: number | components["schemas"]["ItemsSanctionTypes"] | null;
    };
    ItemsWikiCategory: {
      id?: number;
      status?: string;
      sort?: number | null;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      title?: string | null;
      /** @description This slug will be automatically generated/updated based on the title field */
      slug?: string | null;
      description?: string | null;
      /** @description This title will be used instead of the title property if this page is used within a navigation */
      nav_title?: string | null;
      wiki_pages?: ((number | components["schemas"]["ItemsWikiPageWikiCategory"])[]) | null;
    };
    ItemsWikiPage: {
      id?: number;
      status?: string;
      sort?: number | null;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      title?: string | null;
      /** @description This slug will be automatically generated/updated based on the title field */
      slug?: string | null;
      teaser_text?: string | null;
      content?: string | null;
      parent?: number | components["schemas"]["ItemsWikiPage"] | null;
      /** @description This title will be used instead of the title property if this page is used within a navigation */
      nav_title?: string | null;
      /** @description This is for historical purposes during migration */
      djangoId?: string | null;
      /** @description This is the JSON representation of the page content after transition from django */
      djangoContent?: unknown;
      hero?: string | components["schemas"]["Files"] | null;
      children?: ((number | components["schemas"]["ItemsWikiPage"])[]) | null;
      categories?: ((number | components["schemas"]["ItemsWikiPageWikiCategory"])[]) | null;
    };
    ItemsArticleSourcesArticles: {
      id?: number;
      article_sources_id?: number | components["schemas"]["ItemsArticleSources"] | null;
      articles_id?: number | components["schemas"]["ItemsArticles"] | null;
    };
  };
  responses: {
    /** @description Error: Not found. */
    NotFoundError: {
      content: {
        "application/json": {
          error?: {
            /** Format: int64 */
            code?: number;
            message?: string;
          };
        };
      };
    };
    /** @description Error: Unauthorized request */
    UnauthorizedError: {
      content: {
        "application/json": {
          error?: {
            /** Format: int64 */
            code?: number;
            message?: string;
          };
        };
      };
    };
  };
  parameters: {
    /** @description Index */
    Id: number;
    /** @description Unique identifier for the object. */
    UUId: string;
    /** @description Collection of which you want to retrieve the items from. */
    Collection: string;
    /** @description Filter by items that contain the given search query in one of their fields. */
    Search?: string;
    /** @description Cursor for use in pagination. Often used in combination with limit. */
    Page?: number;
    /** @description How many items to skip when fetching data. */
    Offset?: number;
    /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
    Sort?: string[];
    /** @description What metadata to return in the response. */
    Meta?: string;
    /** @description A limit on the number of objects that are returned. */
    Limit?: number;
    /** @description Select items in collection by given conditions. */
    Filter?: string[];
    /** @description Control what fields are being returned in the object. */
    Fields?: string[];
    /** @description Controls if the API sets a cookie or returns a JWT on successful login. */
    Mode: "jwt" | "cookie";
    /** @description Saves the API response to a file. Accepts one of "csv", "json", "xml", "yaml". */
    Export?: "csv" | "json" | "xml" | "yaml";
    /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version. */
    Version?: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get an Asset
   * @description Image typed files can be dynamically resized and transformed to fit any need.
   */
  getAsset: {
    parameters: {
      query?: {
        /** @description The key of the asset size configured in settings. */
        key?: string;
        /** @description A JSON array of image transformations */
        transforms?: string;
        /** @description Download the asset to your computer */
        download?: boolean;
      };
      path: {
        /** @description The id of the file. */
        id: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "text/plain": string;
        };
      };
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve a Temporary Access Token
   * @description Retrieve a Temporary Access Token
   */
  login: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Email address of the user you're retrieving the access token for.
           * @example admin@example.com
           */
          email: string;
          /**
           * Format: password
           * @description Password of the user.
           * @example password
           */
          password: string;
          /**
           * @description Choose between retrieving the token as a string, or setting it as a cookie.
           * @default json
           * @enum {string}
           */
          mode?: "json" | "cookie";
          /** @description If 2FA is enabled, you need to pass the one time password. */
          otp?: string;
        };
      };
    };
    responses: {
      /** @description Successful authentification */
      200: {
        content: {
          "application/json": {
            data?: {
              /** @example eyJhbGciOiJI... */
              access_token?: string;
              /** @example 900 */
              expires?: number;
              /** @example yuOJkjdPXMd... */
              refresh_token?: string;
            };
          };
        };
      };
    };
  };
  /**
   * Refresh Token
   * @description Refresh a Temporary Access Token.
   */
  refresh: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description JWT access token you want to refresh. This token can't be expired.
           * @example eyJ0eXAiOiJKV...
           */
          refresh_token?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: {
              /** @example eyJhbGciOiJI... */
              access_token?: string;
              /** @example 900 */
              expires?: number;
              /** @example Gy-caJMpmGTA... */
              refresh_token?: string;
            };
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Log Out
   * @description Log Out
   */
  logout: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description JWT access token you want to logout.
           * @example eyJ0eXAiOiJKV...
           */
          refresh_token?: string;
        };
      };
    };
    responses: {
      /** @description Request successful */
      200: {
        content: never;
      };
    };
  };
  /**
   * Request a Password Reset
   * @description Request a reset password email to be send.
   */
  passwordRequest: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Email address of the user you're requesting a reset for.
           * @example admin@example.com
           */
          email: string;
        };
      };
    };
    responses: {
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Reset a Password
   * @description The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password.
   */
  passwordReset: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description One-time use JWT token that is used to verify the user.
           * @example eyJ0eXAiOiJKV1Qi...
           */
          token: string;
          /**
           * Format: password
           * @description New password for the user.
           * @example password
           */
          password: string;
        };
      };
    };
    responses: {
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * List OAuth Providers
   * @description List configured OAuth providers.
   */
  oauth: {
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            public?: boolean;
            /**
             * @example [
             *   "github",
             *   "facebook"
             * ]
             */
            data?: string[];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Authenticated using an OAuth provider
   * @description Start OAuth flow using the specified provider
   */
  oauthProvider: {
    parameters: {
      query?: {
        /** @description Where to redirect on successful login.<br/>If set the authentication details are set inside cookies otherwise a JSON is returned. */
        redirect?: string;
      };
      path: {
        /** @description Key of the activated OAuth provider. */
        provider: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            public?: boolean;
            data?: {
              token?: string;
            };
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * System Info
   * @description Perform a system status check and return the options.
   */
  serverInfo: {
    parameters: {
      query: {
        /** @description The first time you create a project, the provided token will be saved and required for subsequent project installs. It can also be found and configured in `/config/__api.json` on your server. */
        super_admin_token: number;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: Record<string, never>;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Ping
   * @description Ping, pong. Ping.. pong.
   */
  ping: {
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/text": string;
        };
      };
    };
  };
  /**
   * List Items
   * @description List the sanction_entities items.
   */
  readItemsSanctionEntities: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSanctionEntities"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single sanction_entities item by unique identifier.
   */
  readSingleItemsSanctionEntities: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSanctionEntities"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the sanction_purposes items.
   */
  readItemsSanctionPurposes: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSanctionPurposes"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single sanction_purposes item by unique identifier.
   */
  readSingleItemsSanctionPurposes: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSanctionPurposes"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the sanction_sectors items.
   */
  readItemsSanctionSectors: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSanctionSectors"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single sanction_sectors item by unique identifier.
   */
  readSingleItemsSanctionSectors: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSanctionSectors"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the sanction_types items.
   */
  readItemsSanctionTypes: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSanctionTypes"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single sanction_types item by unique identifier.
   */
  readSingleItemsSanctionTypes: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSanctionTypes"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the sanctions items.
   */
  readItemsSanctions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSanctions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single sanctions item by unique identifier.
   */
  readSingleItemsSanctions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSanctions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the wiki_page_wiki_category items.
   */
  readItemsWikiPageWikiCategory: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWikiPageWikiCategory"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single wiki_page_wiki_category item by unique identifier.
   */
  readSingleItemsWikiPageWikiCategory: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWikiPageWikiCategory"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the global items.
   */
  readItemsGlobal: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGlobal"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single global item by unique identifier.
   */
  readSingleItemsGlobal: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGlobal"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the homepage items.
   */
  readItemsHomepage: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsHomepage"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single homepage item by unique identifier.
   */
  readSingleItemsHomepage: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsHomepage"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_hero items.
   */
  readItemsBlockHero: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockHero"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_hero item by unique identifier.
   */
  readSingleItemsBlockHero: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockHero"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_richtext items.
   */
  readItemsBlockRichtext: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockRichtext"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_richtext item by unique identifier.
   */
  readSingleItemsBlockRichtext: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockRichtext"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the navigations items.
   */
  readItemsNavigations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsNavigations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single navigations item by unique identifier.
   */
  readSingleItemsNavigations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsNavigations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_cardgroup items.
   */
  readItemsBlockCardgroup: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockCardgroup"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_cardgroup item by unique identifier.
   */
  readSingleItemsBlockCardgroup: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockCardgroup"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_cardgroup_cms_page items.
   */
  readItemsBlockCardgroupCMSPage: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockCardgroupCMSPage"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_cardgroup_cms_page item by unique identifier.
   */
  readSingleItemsBlockCardgroupCMSPage: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockCardgroupCMSPage"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_cardgroup_cards items.
   */
  readItemsBlockCardgroupCards: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockCardgroupCards"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_cardgroup_cards item by unique identifier.
   */
  readSingleItemsBlockCardgroupCards: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockCardgroupCards"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the homepage_blocks items.
   */
  readItemsHomepageBlocks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsHomepageBlocks"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single homepage_blocks item by unique identifier.
   */
  readSingleItemsHomepageBlocks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsHomepageBlocks"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the articles items.
   */
  readItemsArticles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsArticles"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single articles item by unique identifier.
   */
  readSingleItemsArticles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsArticles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the articles_directus_users items.
   */
  readItemsArticlesDirectusUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsArticlesDirectusUsers"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single articles_directus_users item by unique identifier.
   */
  readSingleItemsArticlesDirectusUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsArticlesDirectusUsers"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the cms_page_cms_category items.
   */
  readItemsCMSPageCMSCategory: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCMSPageCMSCategory"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single cms_page_cms_category item by unique identifier.
   */
  readSingleItemsCMSPageCMSCategory: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCMSPageCMSCategory"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the comments items.
   */
  readItemsComments: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsComments"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single comments item by unique identifier.
   */
  readSingleItemsComments: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsComments"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the article_sources items.
   */
  readItemsArticleSources: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsArticleSources"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single article_sources item by unique identifier.
   */
  readSingleItemsArticleSources: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsArticleSources"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the articles_escalation_pathways items.
   */
  readItemsArticlesEscalationPathways: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsArticlesEscalationPathways"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single articles_escalation_pathways item by unique identifier.
   */
  readSingleItemsArticlesEscalationPathways: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsArticlesEscalationPathways"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the cms_category items.
   */
  readItemsCMSCategory: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCMSCategory"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single cms_category item by unique identifier.
   */
  readSingleItemsCMSCategory: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCMSCategory"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the cms_page items.
   */
  readItemsCMSPage: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCMSPage"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single cms_page item by unique identifier.
   */
  readSingleItemsCMSPage: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCMSPage"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List All Fields
   * @description Returns a list of the fields available in the project.
   */
  getFields: {
    parameters: {
      query?: {
        limit?: components["parameters"]["Limit"];
        sort?: components["parameters"]["Sort"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Fields in Collection
   * @description Returns a list of the fields available in the given collection.
   */
  getCollectionFields: {
    parameters: {
      query?: {
        sort?: components["parameters"]["Sort"];
      };
      path: {
        /** @description Unique identifier of the collection the item resides in. */
        collection: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create Field in Collection
   * @description Create a new field in a given collection.
   */
  createField: {
    parameters: {
      path: {
        /** @description Unique identifier of the collection the item resides in. */
        collection: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Unique name of the field. Field name is unique within the collection.
           * @example id
           */
          field: string;
          /**
           * @description Directus specific data type. Used to cast values in the API.
           * @example integer
           */
          type: string;
          /** @description The schema info. */
          schema?: {
            /**
             * @description The name of the field.
             * @example title
             */
            name?: string;
            /**
             * @description The collection of the field.
             * @example posts
             */
            table?: string;
            /**
             * @description The type of the field.
             * @example string
             */
            type?: string;
            /**
             * @description The default value of the field.
             * @example null
             */
            default_value?: string | null;
            /**
             * @description The max length of the field.
             * @example null
             */
            max_length?: number | null;
            /**
             * @description If the field is nullable.
             * @example false
             */
            is_nullable?: boolean;
            /**
             * @description If the field is primary key.
             * @example false
             */
            is_primary_key?: boolean;
            /**
             * @description If the field has auto increment.
             * @example false
             */
            has_auto_increment?: boolean;
            /**
             * @description Related column from the foreign key constraint.
             * @example null
             */
            foreign_key_column?: string | null;
            /**
             * @description Related table from the foreign key constraint.
             * @example null
             */
            foreign_key_table?: string | null;
            /**
             * @description Comment as saved in the database.
             * @example null
             */
            comment?: string | null;
            /**
             * @description Database schema (pg only).
             * @example public
             */
            schema?: string;
            /**
             * @description Related schema from the foreign key constraint (pg only).
             * @example null
             */
            foreign_key_schema?: string | null;
          };
          /** @description The meta info. */
          meta?: ({
            /**
             * @description Unique identifier for the field in the `directus_fields` collection.
             * @example 3
             */
            id?: number;
            /**
             * @description Unique name of the collection this field is in.
             * @example posts
             */
            collection?: string;
            /**
             * @description Unique name of the field. Field name is unique within the collection.
             * @example title
             */
            field?: string;
            /**
             * @description Transformation flag for field
             * @example null
             */
            special?: string[] | null;
            /**
             * @description What interface is used in the admin app to edit the value for this field.
             * @example primary-key
             */
            "system-interface"?: string | null;
            /**
             * @description Options for the interface that's used. This format is based on the individual interface.
             * @example null
             */
            options?: unknown;
            /**
             * @description What display is used in the admin app to display the value for this field.
             * @example null
             */
            display?: string | null;
            /**
             * @description Options for the display that's used. This format is based on the individual display.
             * @example null
             */
            display_options?: unknown;
            /**
             * @description If the field can be altered by the end user. Directus system fields have this value set to `true`.
             * @example true
             */
            locked?: boolean;
            /**
             * @description Prevents the user from editing the value in the field.
             * @example false
             */
            readonly?: boolean;
            /**
             * @description If this field should be hidden.
             * @example true
             */
            hidden?: boolean;
            /**
             * @description Sort order of this field on the edit page of the admin app.
             * @example 1
             */
            sort?: number | null;
            /**
             * @description Width of the field on the edit form.
             * @example null
             * @enum {string|null}
             */
            width?: "half" | "half-left" | "half-right" | "full" | "fill" | null;
            /**
             * @description What field group this field is part of.
             * @example null
             */
            group?: number | null;
            /**
             * @description Key value pair of `<language>: <translation>` that allows the user to change the displayed name of the field in the admin app.
             * @example null
             */
            translation?: unknown;
            /**
             * @description A user provided note for the field. Will be rendered alongside the interface on the edit page.
             * @example
             */
            note?: string | null;
          }) | null;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve a Field
   * @description Retrieves the details of a single field in a given collection.
   */
  getCollectionField: {
    parameters: {
      path: {
        /** @description Unique identifier of the collection the item resides in. */
        collection: string;
        /** @description Unique identifier of the field. */
        id: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a Field
   * @description Delete an existing field.
   */
  deleteField: {
    parameters: {
      path: {
        /** @description Unique identifier of the collection the item resides in. */
        collection: string;
        /** @description Unique identifier of the field. */
        id: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a Field
   * @description Update an existing field.
   */
  updateField: {
    parameters: {
      path: {
        /** @description Unique identifier of the collection the item resides in. */
        collection: string;
        /** @description Unique identifier of the field. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Unique name of the field. Field name is unique within the collection.
           * @example id
           */
          field?: string;
          /**
           * @description Directus specific data type. Used to cast values in the API.
           * @example integer
           */
          type?: string;
          /** @description The schema info. */
          schema?: {
            /**
             * @description The name of the field.
             * @example title
             */
            name?: string;
            /**
             * @description The collection of the field.
             * @example posts
             */
            table?: string;
            /**
             * @description The type of the field.
             * @example string
             */
            type?: string;
            /**
             * @description The default value of the field.
             * @example null
             */
            default_value?: string | null;
            /**
             * @description The max length of the field.
             * @example null
             */
            max_length?: number | null;
            /**
             * @description If the field is nullable.
             * @example false
             */
            is_nullable?: boolean;
            /**
             * @description If the field is primary key.
             * @example false
             */
            is_primary_key?: boolean;
            /**
             * @description If the field has auto increment.
             * @example false
             */
            has_auto_increment?: boolean;
            /**
             * @description Related column from the foreign key constraint.
             * @example null
             */
            foreign_key_column?: string | null;
            /**
             * @description Related table from the foreign key constraint.
             * @example null
             */
            foreign_key_table?: string | null;
            /**
             * @description Comment as saved in the database.
             * @example null
             */
            comment?: string | null;
            /**
             * @description Database schema (pg only).
             * @example public
             */
            schema?: string;
            /**
             * @description Related schema from the foreign key constraint (pg only).
             * @example null
             */
            foreign_key_schema?: string | null;
          };
          /** @description The meta info. */
          meta?: ({
            /**
             * @description Unique identifier for the field in the `directus_fields` collection.
             * @example 3
             */
            id?: number;
            /**
             * @description Unique name of the collection this field is in.
             * @example posts
             */
            collection?: string;
            /**
             * @description Unique name of the field. Field name is unique within the collection.
             * @example title
             */
            field?: string;
            /**
             * @description Transformation flag for field
             * @example null
             */
            special?: string[] | null;
            /**
             * @description What interface is used in the admin app to edit the value for this field.
             * @example primary-key
             */
            "system-interface"?: string | null;
            /**
             * @description Options for the interface that's used. This format is based on the individual interface.
             * @example null
             */
            options?: unknown;
            /**
             * @description What display is used in the admin app to display the value for this field.
             * @example null
             */
            display?: string | null;
            /**
             * @description Options for the display that's used. This format is based on the individual display.
             * @example null
             */
            display_options?: unknown;
            /**
             * @description If the field can be altered by the end user. Directus system fields have this value set to `true`.
             * @example true
             */
            locked?: boolean;
            /**
             * @description Prevents the user from editing the value in the field.
             * @example false
             */
            readonly?: boolean;
            /**
             * @description If this field should be hidden.
             * @example true
             */
            hidden?: boolean;
            /**
             * @description Sort order of this field on the edit page of the admin app.
             * @example 1
             */
            sort?: number | null;
            /**
             * @description Width of the field on the edit form.
             * @example null
             * @enum {string|null}
             */
            width?: "half" | "half-left" | "half-right" | "full" | "fill" | null;
            /**
             * @description What field group this field is part of.
             * @example null
             */
            group?: number | null;
            /**
             * @description Key value pair of `<language>: <translation>` that allows the user to change the displayed name of the field in the admin app.
             * @example null
             */
            translation?: unknown;
            /**
             * @description A user provided note for the field. Will be rendered alongside the interface on the edit page.
             * @example
             */
            note?: string | null;
          }) | null;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Relations
   * @description List the relations.
   */
  getRelations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        meta?: components["parameters"]["Meta"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
        page?: components["parameters"]["Page"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Relations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create a Relation
   * @description Create a new relation.
   */
  createRelation: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Collection that has the field that holds the foreign key.
           * @example articles
           */
          collection_many?: string;
          /**
           * @description Collection on the _one_ side of the relationship.
           * @example authors
           */
          collection_one?: string;
          /**
           * @description Foreign key. Field that holds the primary key of the related collection.
           * @example author
           */
          field_many?: string;
          /**
           * @description Alias column that serves as the _one_ side of the relationship.
           * @example books
           */
          field_one?: string;
          /** @description Field on the junction table that holds the primary key of the related collection. */
          junction_field?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Relations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve a Relation
   * @description Retrieve a single relation by unique identifier.
   */
  getRelation: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Relations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a Relation
   * @description Delete an existing relation.
   */
  deleteRelation: {
    parameters: {
      path: {
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a Relation
   * @description Update an existing relation
   */
  updateRelation: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["Id"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Collection that has the field that holds the foreign key. */
          collection_many?: string;
          /** @description Collection on the _one_ side of the relationship. */
          collection_one?: string;
          /** @description Foreign key. Field that holds the primary key of the related collection. */
          field_many?: string;
          /**
           * @description Alias column that serves as the _one_ side of the relationship.
           * @example books
           */
          field_one?: string;
          /** @description Field on the junction table that holds the primary key of the related collection. */
          junction_field?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Relations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Files
   * @description List the files.
   */
  getFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve a Files
   * @description Retrieve a single file by unique identifier.
   */
  getFile: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * List Items
   * @description List the escalation_pathway_statuses items.
   */
  readItemsEscalationPathwayStatuses: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEscalationPathwayStatuses"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single escalation_pathway_statuses item by unique identifier.
   */
  readSingleItemsEscalationPathwayStatuses: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEscalationPathwayStatuses"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the escalation_regions items.
   */
  readItemsEscalationRegions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEscalationRegions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single escalation_regions item by unique identifier.
   */
  readSingleItemsEscalationRegions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEscalationRegions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the escalation_pathways items.
   */
  readItemsEscalationPathways: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEscalationPathways"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single escalation_pathways item by unique identifier.
   */
  readSingleItemsEscalationPathways: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEscalationPathways"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the sanctions_sanction_purposes items.
   */
  readItemsSanctionsSanctionPurposes: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSanctionsSanctionPurposes"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single sanctions_sanction_purposes item by unique identifier.
   */
  readSingleItemsSanctionsSanctionPurposes: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSanctionsSanctionPurposes"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the sanctions_sanction_sectors items.
   */
  readItemsSanctionsSanctionSectors: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSanctionsSanctionSectors"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single sanctions_sanction_sectors item by unique identifier.
   */
  readSingleItemsSanctionsSanctionSectors: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSanctionsSanctionSectors"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the sanctions_sanction_types items.
   */
  readItemsSanctionsSanctionTypes: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSanctionsSanctionTypes"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single sanctions_sanction_types item by unique identifier.
   */
  readSingleItemsSanctionsSanctionTypes: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSanctionsSanctionTypes"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the wiki_category items.
   */
  readItemsWikiCategory: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWikiCategory"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single wiki_category item by unique identifier.
   */
  readSingleItemsWikiCategory: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWikiCategory"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the wiki_page items.
   */
  readItemsWikiPage: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWikiPage"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single wiki_page item by unique identifier.
   */
  readSingleItemsWikiPage: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWikiPage"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the article_sources_articles items.
   */
  readItemsArticleSourcesArticles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsArticleSourcesArticles"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single article_sources_articles item by unique identifier.
   */
  readSingleItemsArticleSourcesArticles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsArticleSourcesArticles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
}
